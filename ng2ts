(ng transforms components,directives them when it parses html tags)

component: html tags  {} -> <>;            they are html elements themselves
directive: extends html tags as attribute; live in html elements (ng transforms them when it parses it)
service: get data (from rest api)
dependency injection: provider:[ , , ]

data (top to bottom - to dom elements)
event(bottom to top - from dom elements)

{} = object
() = event
[] = data
-------------------------------------
no controller in directive (replaced directive w/ components)
no scope (comunicate btw templates & controller)

======================
TYPESCRIPT
classes
template
types
annotation (adding metadata to code)

------
component
---------
metadata of component
-selector <html tag name>
-template: `<html tags> *ngFor {{interpolation (var replace w/ value)}} </>`
-provider: [list of injected class/script]
-directive: []

export class MyClass {
    title: private string = 'haha'
    constructor(
    )
}
====================

directive
---------
